# ===============================================
# ARCHIVO: backend/app/repositories/factura/validation_mixin.py
# PROP칍SITO: Mixin para validaciones espec칤ficas de facturas
# VERSI칍N: 1.0.0 - Optimizado usando DTOs existentes del proyecto
# FASE: 4 - Validaciones y Stats (15% del m칩dulo)
# ===============================================

"""
Mixin para validaciones de negocio espec칤ficas para facturas SIFEN.

游꿢 OPTIMIZACI칍N v1.0:
- Usa DTOs existentes en lugar de crear clases nuevas
- Reutiliza excepciones del proyecto
- Validaciones espec칤ficas Paraguay y SIFEN
- Integra con utils.py para c치lculos
- Reduce duplicaci칩n de c칩digo

Validaciones implementadas:
- Datos: RUC Paraguay, fechas SET, montos Guaran칤es
- Items: IVA coherente, precios positivos, cantidades v치lidas
- Negocio: L칤mites SET, numeraci칩n, timbrados
- SIFEN: CDC, XML structure, campos obligatorios
"""

import logging
from typing import List, Dict, Any, Optional, Tuple, Callable, Type
from decimal import Decimal, InvalidOperation
from datetime import datetime, date, timedelta
from sqlalchemy.orm import Session
from sqlalchemy.exc import SQLAlchemyError

# Imports del proyecto - USAR RECURSOS EXISTENTES
from app.models.factura import Factura, EstadoDocumentoEnum, TipoDocumentoEnum
from app.core.exceptions import (
    SifenValidationError,
    SifenBusinessLogicError,
    SifenDatabaseError
)
from app.schemas.common import (
    ValidationErrorResponse,
    SuccessResponse,
    MonedaEnum
)
from .utils import (
    log_repository_operation,
    validate_ruc_paraguayo,
    validate_ci_paraguaya,
    validate_cdc_format,
    validate_fecha_emision,
    calculate_factura_totals,
    SifenConstants,
)
from ..utils import safe_get

logger = logging.getLogger("factura_repository.validation")

# ===============================================
# CONSTANTES ESPEC칈FICAS VALIDACI칍N
# ===============================================

# L칤mites oficiales SET Paraguay
SET_LIMITS = {
    "monto_maximo_factura": Decimal("999999999999"),  # 999 mil millones
    "cantidad_maxima_items": 999,
    "longitud_maxima_observaciones": 500,
    "longitud_maxima_descripcion": 250,
    "dias_maximo_emision_atrasada": 45,
    "precio_unitario_maximo": Decimal("99999999999"),  # 99 mil millones
    "cantidad_maxima_item": Decimal("999999.999"),
}

# Tasas IVA v치lidas Paraguay
TASAS_IVA_VALIDAS = {
    Decimal("0"): "1",    # Exento
    Decimal("5"): "2",    # 5%
    Decimal("10"): "3"    # 10%
}

# Estados que permiten modificaci칩n
ESTADOS_MODIFICABLES = [EstadoDocumentoEnum.BORRADOR.value]

# ===============================================
# HELPER PARA VALIDACIONES COMUNES
# ===============================================


class ValidationHelper:
    """Helper para validaciones repetitivas."""

    @staticmethod
    def validate_decimal_range(
        value: Any,
        min_val: Decimal = Decimal("0"),
        max_val: Optional[Decimal] = None,
        field_name: str = "campo"
    ) -> Tuple[bool, str]:
        """Valida rango de decimal."""
        try:
            decimal_val = Decimal(
                str(value)) if value is not None else Decimal("0")

            if decimal_val < min_val:
                return False, f"{field_name} no puede ser menor a {min_val}"

            if max_val and decimal_val > max_val:
                return False, f"{field_name} no puede ser mayor a {max_val}"

            return True, "V치lido"

        except (ValueError, InvalidOperation):
            return False, f"{field_name} debe ser un n칰mero v치lido"

    @staticmethod
    def validate_string_length(
        value: Optional[str],
        max_length: int,
        field_name: str = "campo",
        required: bool = False
    ) -> Tuple[bool, str]:
        """Valida longitud de string."""
        if not value:
            if required:
                return False, f"{field_name} es requerido"
            return True, "V치lido"

        if len(value.strip()) > max_length:
            return False, f"{field_name} no puede exceder {max_length} caracteres"

        return True, "V치lido"

    @staticmethod
    def validate_required_fields(data: Dict[str, Any], required_fields: List[str]) -> List[str]:
        """Valida campos requeridos."""
        missing = []
        for field in required_fields:
            if field not in data or data[field] is None or data[field] == "":
                missing.append(field)
        return missing

# ===============================================
# MIXIN PRINCIPAL OPTIMIZADO
# ===============================================


class FacturaValidationMixin:
    """
    Mixin optimizado para validaciones espec칤ficas de facturas SIFEN.

    游꿢 OPTIMIZACIONES v1.0:
    - Usa DTOs existentes del proyecto
    - Helper para validaciones repetitivas
    - Validaciones espec칤ficas Paraguay
    - Integra con utils.py existente
    """
    # Type hints para atributos que ser치n proporcionados por el repository base
    db: Session
    model: Type[Factura]

    # M칠todos del repository base que usa este mixin
    get_by_id: Callable[..., Optional[Factura]]

    # ===============================================
    # VALIDACIONES DATOS
    # ===============================================

    async def validate_factura_data(self, data: Dict[str, Any]) -> ValidationErrorResponse | SuccessResponse:
        """
        Valida datos b치sicos de factura seg칰n normativa Paraguay.

        Args:
            data: Datos de la factura a validar

        Returns:
            ValidationErrorResponse o SuccessResponse
        """
        try:
            errors = {}

            # Validar campos requeridos
            required_fields = ["cliente_id", "items",
                               "tipo_operacion", "condicion_operacion"]
            missing = ValidationHelper.validate_required_fields(
                data, required_fields)
            if missing:
                errors["campos_requeridos"] = [
                    f"Campo requerido: {field}" for field in missing]

            # Validar fecha emisi칩n
            fecha_emision = data.get("fecha_emision")
            if fecha_emision:
                if not validate_fecha_emision(fecha_emision):
                    errors["fecha_emision"] = [
                        "Fecha emisi칩n fuera del rango permitido (m치x. 45 d칤as atr치s)"]

            # Validar moneda y tipo cambio
            moneda = data.get("moneda", "PYG")
            tipo_cambio = data.get("tipo_cambio", Decimal("1.0"))

            if moneda == "PYG" and tipo_cambio != Decimal("1.0"):
                errors["tipo_cambio"] = [
                    "Tipo cambio debe ser 1.0 para Guaran칤es"]
            elif moneda != "PYG" and tipo_cambio <= Decimal("0"):
                errors["tipo_cambio"] = [
                    "Tipo cambio debe ser mayor a 0 para moneda extranjera"]

            # Validar observaciones
            observaciones = data.get("observaciones")
            is_valid, msg = ValidationHelper.validate_string_length(
                observaciones, SET_LIMITS["longitud_maxima_observaciones"], "observaciones"
            )
            if not is_valid:
                errors["observaciones"] = [msg]

            # Validar establecimiento y punto expedici칩n
            for field in ["establecimiento", "punto_expedicion"]:
                value = data.get(field)
                if value:
                    try:
                        num = int(value)
                        if not (1 <= num <= 999):
                            errors[field] = [
                                f"{field} debe estar entre 001 y 999"]
                    except ValueError:
                        errors[field] = [f"{field} debe ser num칠rico"]

            log_repository_operation(
                "validate_factura_data",
                details={"errores": len(errors), "campos_validados": len(data)}
            )

            if errors:
                return ValidationErrorResponse(
                    message="Errores de validaci칩n en datos de factura",
                    field_errors=errors
                )

            return SuccessResponse(
                message="Datos de factura v치lidos",
                data={"campos_validados": len(data)}
            )

        except Exception as e:
            logger.error(f"Error validando datos factura: {e}")
            return ValidationErrorResponse(
                message="Error inesperado en validaci칩n",
                field_errors={"general": [str(e)]}
            )

    async def validate_items_consistency(self, items: List[Dict]) -> bool:
        """
        Valida coherencia de items de factura.

        Args:
            items: Lista de items a validar

        Returns:
            bool: True si todos los items son v치lidos
        """
        try:
            if not items:
                return False

            if len(items) > SET_LIMITS["cantidad_maxima_items"]:
                return False

            for i, item in enumerate(items):
                # Validar cantidad
                cantidad = item.get("cantidad", 0)
                is_valid, _ = ValidationHelper.validate_decimal_range(
                    cantidad, Decimal(
                        "0.001"), SET_LIMITS["cantidad_maxima_item"], "cantidad"
                )
                if not is_valid:
                    return False

                # Validar precio unitario
                precio = item.get("precio_unitario", 0)
                is_valid, _ = ValidationHelper.validate_decimal_range(
                    precio, Decimal(
                        "0"), SET_LIMITS["precio_unitario_maximo"], "precio_unitario"
                )
                if not is_valid:
                    return False

                # Validar que no haya cantidades negativas
                if Decimal(str(cantidad)) <= 0:
                    return False

                # Validar coherencia descuentos
                desc_unitario = item.get("descuento_unitario", 0)
                desc_porcentual = item.get("descuento_porcentual", 0)

                if Decimal(str(desc_unitario)) > 0 and Decimal(str(desc_porcentual)) > 0:
                    return False  # No ambos descuentos simult치neamente

            log_repository_operation("validate_items_consistency", details={
                                     "items": len(items)})
            return True

        except Exception as e:
            logger.error(f"Error validando items: {e}")
            return False

    async def validate_tax_calculations(self, factura_id: int) -> bool:
        """
        Valida c치lculos de IVA y totales.

        Args:
            factura_id: ID de la factura

        Returns:
            bool: True si los c치lculos son correctos
        """
        try:
            factura = self.get_by_id(self.db, id=factura_id)
            if not factura:
                return False

            # Obtener totales calculados vs almacenados
            total_general_bd = safe_get(factura, 'total_general', Decimal("0"))
            total_iva_bd = safe_get(factura, 'total_iva', Decimal("0"))

            # TODO: Cuando est칠n implementados los items, usar calculate_factura_totals
            # Por ahora validar coherencia b치sica
            if total_general_bd < 0:
                return False

            if total_iva_bd < 0:
                return False

            # Validar que total >= IVA
            if total_general_bd < total_iva_bd:
                return False

            log_repository_operation(
                "validate_tax_calculations", entity_id=factura_id)
            return True

        except Exception as e:
            logger.error(f"Error validando c치lculos IVA: {e}")
            return False

    # ===============================================
    # VALIDACIONES NEGOCIO
    # ===============================================

    async def validate_client_requirements(self, cliente_id: int, empresa_id: int) -> bool:
        """
        Valida requisitos del cliente para facturaci칩n.

        Args:
            cliente_id: ID del cliente
            empresa_id: ID de la empresa

        Returns:
            bool: True si el cliente cumple requisitos
        """
        try:
            # TODO: Implementar cuando est칠 disponible ClienteRepository
            # Por ahora validaci칩n b치sica

            if cliente_id <= 0:
                return False

            if empresa_id <= 0:
                return False

            # Validar que cliente y empresa no sean el mismo
            if cliente_id == empresa_id:
                return False

            log_repository_operation(
                "validate_client_requirements",
                details={"cliente_id": cliente_id, "empresa_id": empresa_id}
            )
            return True

        except Exception as e:
            logger.error(f"Error validando requisitos cliente: {e}")
            return False

    async def validate_payment_terms(self, factura_data: Dict) -> bool:
        """
        Valida t칠rminos de pago de la factura.

        Args:
            factura_data: Datos de la factura

        Returns:
            bool: True si los t칠rminos son v치lidos
        """
        try:
            condicion = factura_data.get("condicion_operacion", "1")

            # Validar condici칩n v치lida
            if condicion not in ["1", "2"]:  # 1=contado, 2=cr칠dito
                return False

            # Si es a cr칠dito, validar t칠rminos adicionales
            if condicion == "2":
                # TODO: Validar fechas de vencimiento cuando est칠 implementado
                pass

            # Validar tipo operaci칩n
            tipo_operacion = factura_data.get("tipo_operacion", "1")
            if tipo_operacion not in ["1", "2", "3", "4"]:
                return False

            log_repository_operation("validate_payment_terms", details={
                                     "condicion": condicion})
            return True

        except Exception as e:
            logger.error(f"Error validando t칠rminos pago: {e}")
            return False

    async def validate_business_rules(self, factura_data: Dict) -> ValidationErrorResponse | SuccessResponse:
        """
        Valida reglas de negocio espec칤ficas SIFEN.

        Args:
            factura_data: Datos de la factura

        Returns:
            ValidationErrorResponse o SuccessResponse
        """
        try:
            errors = {}

            # Validar l칤mites SET
            total_general = factura_data.get("total_general", 0)
            is_valid, msg = ValidationHelper.validate_decimal_range(
                total_general, Decimal(
                    "0"), SET_LIMITS["monto_maximo_factura"], "total_general"
            )
            if not is_valid:
                errors["total_general"] = [msg]

            # Validar items count
            items = factura_data.get("items", [])
            if len(items) > SET_LIMITS["cantidad_maxima_items"]:
                errors["items"] = [
                    f"M치ximo {SET_LIMITS['cantidad_maxima_items']} items permitidos"]

            # Validar numeraci칩n secuencial (cuando est칠 implementado)
            # TODO: Implementar validaci칩n de secuencia con numeracion_mixin

            # Validar moneda v치lida
            moneda = factura_data.get("moneda", "PYG")
            if moneda not in ["PYG", "USD", "EUR", "BRL", "ARS"]:
                errors["moneda"] = ["Moneda no v치lida para SIFEN"]

            log_repository_operation(
                "validate_business_rules",
                details={"errores": len(errors)}
            )

            if errors:
                return ValidationErrorResponse(
                    message="Errores en reglas de negocio",
                    field_errors=errors
                )

            return SuccessResponse(
                message="Reglas de negocio v치lidas",
                data={"reglas_validadas": 5}
            )

        except Exception as e:
            logger.error(f"Error validando reglas negocio: {e}")
            return ValidationErrorResponse(
                message="Error inesperado en validaci칩n reglas",
                field_errors={"general": [str(e)]}
            )

    # ===============================================
    # VALIDACIONES SIFEN
    # ===============================================

    async def validate_sifen_factura(self, factura_id: int) -> bool:
        """
        Valida que factura cumple requisitos SIFEN.

        Args:
            factura_id: ID de la factura

        Returns:
            bool: True si cumple requisitos SIFEN
        """
        try:
            factura = self.get_by_id(self.db, id=factura_id)
            if not factura:
                return False

            # Validar CDC si existe
            cdc = safe_get(factura, 'cdc')
            if cdc and not validate_cdc_format(cdc):
                return False

            # Validar timbrado
            numero_timbrado = safe_get(factura, 'numero_timbrado')
            if not numero_timbrado:
                return False

            # Validar vigencia timbrado
            fecha_inicio = safe_get(factura, 'fecha_inicio_vigencia')
            fecha_fin = safe_get(factura, 'fecha_fin_vigencia')

            if fecha_inicio and fecha_fin:
                hoy = date.today()
                if not (fecha_inicio <= hoy <= fecha_fin):
                    return False

            # Validar numeraci칩n
            establecimiento = safe_get(factura, 'establecimiento')
            punto_expedicion = safe_get(factura, 'punto_expedicion')
            numero_documento = safe_get(factura, 'numero_documento')

            if not all([establecimiento, punto_expedicion, numero_documento]):
                return False

            # Validar formato numeraci칩n
            try:
                est_num = int(establecimiento)
                pex_num = int(punto_expedicion)
                doc_num = int(numero_documento)

                if not (1 <= est_num <= 999 and 1 <= pex_num <= 999 and 1 <= doc_num <= 9999999):
                    return False

            except ValueError:
                return False

            log_repository_operation(
                "validate_sifen_factura", entity_id=factura_id)
            return True

        except Exception as e:
            logger.error(f"Error validando requisitos SIFEN: {e}")
            return False

    async def validate_xml_generation(self, factura_id: int) -> bool:
        """
        Valida que factura puede generar XML v치lido.

        Args:
            factura_id: ID de la factura

        Returns:
            bool: True si puede generar XML
        """
        try:
            factura = self.get_by_id(self.db, id=factura_id)
            if not factura:
                return False

            # Validar estado apropiado
            estado = safe_get(factura, 'estado')
            if estado not in [EstadoDocumentoEnum.BORRADOR.value, EstadoDocumentoEnum.GENERADO.value]:
                return False

            # Validar datos m칤nimos para XML
            required_for_xml = [
                'empresa_id', 'cliente_id', 'fecha_emision',
                'tipo_documento', 'numero_timbrado', 'total_general'
            ]

            for field in required_for_xml:
                value = safe_get(factura, field)
                if value is None:
                    return False

            # Validar que tenga items (cuando est칠 implementado)
            # TODO: Verificar items cuando est칠 ItemFactura

            # Validar totales coherentes
            total_general = safe_get(factura, 'total_general', Decimal("0"))
            if total_general <= 0:
                return False

            log_repository_operation(
                "validate_xml_generation", entity_id=factura_id)
            return True

        except Exception as e:
            logger.error(f"Error validando generaci칩n XML: {e}")
            return False

    # ===============================================
    # M칄TODOS AUXILIARES
    # ===============================================

    async def validate_factura_complete(self, factura_id: int) -> Dict[str, Any]:
        """
        Validaci칩n completa de factura.

        Args:
            factura_id: ID de la factura

        Returns:
            dict: Resultado de todas las validaciones
        """
        try:
            results = {
                "factura_id": factura_id,
                "validaciones": {},
                "errores": [],
                "todas_validas": True
            }

            # Ejecutar todas las validaciones
            validations = [
                ("tax_calculations", self.validate_tax_calculations(factura_id)),
                ("sifen_requirements", self.validate_sifen_factura(factura_id)),
                ("xml_generation", self.validate_xml_generation(factura_id))
            ]

            for name, validation in validations:
                result = await validation
                results["validaciones"][name] = result

                if not result:
                    results["todas_validas"] = False
                    results["errores"].append(f"Fall칩 validaci칩n: {name}")

            log_repository_operation(
                "validate_factura_complete",
                entity_id=factura_id,
                details={"validaciones_pasadas": sum(
                    results["validaciones"].values())}
            )

            return results

        except Exception as e:
            logger.error(f"Error validaci칩n completa: {e}")
            return {
                "factura_id": factura_id,
                "validaciones": {},
                "errores": [str(e)],
                "todas_validas": False
            }

    def get_validation_summary(self) -> Dict[str, Any]:
        """Informaci칩n del mixin de validaci칩n."""
        return {
            "name": "FacturaValidationMixin",
            "version": "1.0.0 - Optimizado",
            "validations_available": [
                "validate_factura_data",
                "validate_items_consistency",
                "validate_tax_calculations",
                "validate_client_requirements",
                "validate_payment_terms",
                "validate_business_rules",
                "validate_sifen_factura",
                "validate_xml_generation"
            ],
            "sets_limits": SET_LIMITS,
            "supported_currencies": ["PYG", "USD", "EUR", "BRL", "ARS"],
            "iva_rates": list(TASAS_IVA_VALIDAS.keys())
        }

# ===============================================
# EXPORTS
# ===============================================


__all__ = [
    "FacturaValidationMixin",
    "ValidationHelper",
    "SET_LIMITS",
    "TASAS_IVA_VALIDAS",
    "ESTADOS_MODIFICABLES"
]
