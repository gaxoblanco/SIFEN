# ===============================================
# ARCHIVO: backend/app/schemas/common.py
# PROP칍SITO: DTOs comunes para APIs REST - Paginaci칩n, Respuestas Est치ndar
# PRIORIDAD: 游리 CR칈TICO - Base para todos los dem치s DTOs
# ===============================================

"""
Esquemas Pydantic comunes para APIs REST del sistema SIFEN.

Este m칩dulo define DTOs base reutilizables en todas las APIs:
- Paginaci칩n est치ndar
- Respuestas exitosas/error uniformes
- Tipos base para responses
- Validadores comunes Paraguay

Usado por:
- api/v1/facturas.py
- api/v1/clientes.py
- api/v1/productos.py
- api/v1/empresas.py
"""

from enum import Enum
from typing import Any, Dict, Generic, List, Optional, TypeVar, Union
from datetime import datetime
from decimal import Decimal
from pydantic import BaseModel, Field, validator
from pydantic.generics import GenericModel
import re


# ===============================================
# TIPOS GEN칄RICOS
# ===============================================

# Tipo gen칠rico para responses paginadas
DataT = TypeVar('DataT')


class DepartamentoParaguayEnum(str, Enum):
    """
    Departamentos oficiales de Paraguay seg칰n SET.

    C칩digos oficiales utilizados en documentos fiscales y SIFEN.
    Total: 17 departamentos + Asunci칩n (incluida en Central).

    Fuente: Ministerio del Interior, SET Paraguay
    칔ltima actualizaci칩n: 2024
    """
    CONCEPCION = "01"           # Concepci칩n
    SAN_PEDRO = "02"            # San Pedro
    CORDILLERA = "03"           # Cordillera
    GUAIRA = "04"               # Guair치
    CAAGUAZU = "05"             # Caaguaz칰
    CAAZAPA = "06"              # Caazap치
    ITAPUA = "07"               # Itap칰a
    MISIONES = "08"             # Misiones
    PARAGUARI = "09"            # Paraguar칤
    ALTO_PARANA = "10"          # Alto Paran치
    CENTRAL = "11"              # Central (incluye Asunci칩n)
    NEEMBUCU = "12"             # 칌eembuc칰
    AMAMBAY = "13"              # Amambay
    CANINDEYU = "14"            # Canindey칰
    PRESIDENTE_HAYES = "15"     # Presidente Hayes
    ALTO_PARAGUAY = "16"        # Alto Paraguay
    BOQUERON = "17"             # Boquer칩n


class MonedaEnum(str, Enum):
    """Monedas soportadas por SIFEN"""
    PYG = "PYG"                      # Guaran칤 paraguayo
    USD = "USD"                      # D칩lar americano
    EUR = "EUR"                      # Euro
    BRL = "BRL"                      # Real brasile침o


# ===============================================
# PAGINACI칍N
# ===============================================


class PaginationParams(BaseModel):
    """
    Par치metros de paginaci칩n est치ndar para APIs.

    Usado en query parameters de endpoints que retornan listas.
    Implementa paginaci칩n est치ndar con l칤mites razonables.

    Examples:
        ```python
        # GET /api/v1/facturas?page=2&size=50
        params = PaginationParams(page=2, size=50)
        ```
    """

    page: int = Field(
        default=1,
        ge=1,
        description="N칰mero de p치gina (base 1)"
    )

    size: int = Field(
        default=20,
        ge=1,
        le=50,
        description="Elementos por p치gina (m치x. 50)"
    )

    class Config:
        # Permitir populate by name para compatibilidad frontend
        allow_population_by_field_name = True
        # Schema extra para documentaci칩n
        schema_extra = {
            "example": {
                "page": 1,
                "size": 20
            }
        }


class PaginationMeta(BaseModel):
    """
    Metadatos de paginaci칩n para respuestas.

    Informaci칩n adicional sobre el estado de la paginaci칩n
    para facilitar navegaci칩n en frontend.
    """

    page: int = Field(..., description="P치gina actual")
    size: int = Field(..., description="Elementos por p치gina")
    total: int = Field(..., description="Total de elementos")
    pages: int = Field(..., description="Total de p치ginas")
    has_next: bool = Field(..., description="Tiene p치gina siguiente")
    has_prev: bool = Field(..., description="Tiene p치gina anterior")

    class Config:
        schema_extra = {
            "example": {
                "page": 1,
                "size": 20,
                "total": 150,
                "pages": 8,
                "has_next": True,
                "has_prev": False
            }
        }


class PaginatedResponse(GenericModel, Generic[DataT]):
    """
    Response paginada gen칠rica.

    Estructura est치ndar para todas las respuestas que incluyen listas
    paginadas de datos. Mantiene consistencia en formato de respuesta.

    Type Parameters:
        DataT: Tipo de los elementos en la lista de datos

    Examples:
        ```python
        # Response de lista de facturas
        response: PaginatedResponse[FacturaResponseDTO] = PaginatedResponse(
            data=[factura1, factura2, ...],
            meta=PaginationMeta(page=1, size=20, total=150, ...)
        )
        ```
    """

    data: List[DataT] = Field(..., description="Lista de elementos")
    meta: PaginationMeta = Field(..., description="Metadatos de paginaci칩n")


# ===============================================
# RESPUESTAS EST츼NDAR
# ===============================================

class SuccessResponse(BaseModel):
    """
    Respuesta exitosa est치ndar.

    Usado para operaciones que no retornan datos espec칤ficos
    pero necesitan confirmar 칠xito de la operaci칩n.

    Examples:
        ```python
        # DELETE /api/v1/facturas/123
        return SuccessResponse(
            success=True,
            message="Factura eliminada exitosamente",
            data={"factura_id": 123}
        )
        ```
    """

    success: bool = Field(
        default=True,
        description="Indica si la operaci칩n fue exitosa"
    )

    message: str = Field(
        ...,
        description="Mensaje descriptivo de la operaci칩n"
    )

    data: Optional[Dict[str, Any]] = Field(
        default=None,
        description="Datos adicionales opcionales"
    )

    timestamp: datetime = Field(
        default_factory=datetime.now,
        description="Timestamp de la respuesta"
    )

    class Config:
        schema_extra = {
            "example": {
                "success": True,
                "message": "Factura creada exitosamente",
                "data": {"factura_id": 123, "numero": "001-001-0000123"},
                "timestamp": "2025-01-15T10:30:00"
            }
        }


class ErrorResponse(BaseModel):
    """
    Respuesta de error est치ndar.

    Estructura uniforme para todos los errores de la API.
    Incluye c칩digos de error espec칤ficos y detalles para debugging.

    Examples:
        ```python
        # Error de validaci칩n
        return ErrorResponse(
            success=False,
            error_code="VALIDATION_ERROR",
            message="Datos de entrada inv치lidos",
            details={"ruc": ["Formato RUC inv치lido"]}
        )
        ```
    """

    success: bool = Field(
        default=False,
        description="Indica que la operaci칩n fall칩"
    )

    error_code: str = Field(
        ...,
        description="C칩digo de error espec칤fico"
    )

    message: str = Field(
        ...,
        description="Mensaje de error legible"
    )

    details: Optional[Dict[str, Any]] = Field(
        default=None,
        description="Detalles adicionales del error"
    )

    timestamp: datetime = Field(
        default_factory=datetime.now,
        description="Timestamp del error"
    )

    class Config:
        schema_extra = {
            "example": {
                "success": False,
                "error_code": "VALIDATION_ERROR",
                "message": "Error en validaci칩n de datos de entrada",
                "details": {
                    "ruc": ["Formato RUC inv치lido"],
                    "email": ["Email requerido"]
                },
                "timestamp": "2025-01-15T10:30:00"
            }
        }


class MessageResponse(BaseModel):
    """
    Respuesta simple con mensaje.

    Para operaciones simples que solo necesitan retornar un mensaje
    de confirmaci칩n sin datos adicionales.

    Examples:
        ```python
        # Ping endpoint
        return MessageResponse(message="API funcionando correctamente")
        ```
    """

    message: str = Field(
        ...,
        description="Mensaje de respuesta"
    )

    timestamp: datetime = Field(
        default_factory=datetime.now,
        description="Timestamp de la respuesta"
    )

    class Config:
        schema_extra = {
            "example": {
                "message": "Sistema funcionando correctamente",
                "timestamp": "2025-01-15T10:30:00"
            }
        }


# ===============================================
# VALIDADORES PARAGUAY
# ===============================================

class RucValidation(BaseModel):
    """
    Validador especializado para RUC Paraguay.

    Valida formato RUC con d칤gito verificador seg칰n normativa
    de la SET (Subsecretar칤a de Estado de Tributaci칩n).

    Formatos v치lidos:
        - 12345678-9 (8 d칤gitos + DV)

    Algoritmo d칤gito verificador: M칩dulo 11 SET Paraguay
        - Factores: [2, 3, 4, 5, 6, 7, 2, 3]
        - Si resto < 2: DV = 0, sino DV = 11 - resto
    """

    ruc: str = Field(
        ...,
        min_length=10,
        max_length=10,
        description="RUC Paraguay con d칤gito verificador (formato: 12345678-9)"
    )

    @validator('ruc')
    def validate_ruc_format(cls, v):
        """
        Valida formato b치sico de RUC Paraguay.

        TODO: Implementar validaci칩n completa de d칤gito verificador
        usando algoritmo oficial de la SET.
        """
        # Remover espacios y convertir a may칰sculas
        v = v.strip().upper()

        # Validar formato con regex
        if not re.match(r'^\d{8}-\d$', v):
            raise ValueError('Formato RUC inv치lido. Debe ser: 12345678-9')

        # Extraer partes del RUC
        ruc_parts = v.split('-')
        ruc_number = ruc_parts[0]
        dv = ruc_parts[1]

        # Validar que no sea RUC de prueba inv치lido
        if ruc_number == "00000000":
            raise ValueError("RUC 00000000 no es v치lido")

        # Validar que el primer d칤gito no sea 0 (excepto casos especiales)
        if ruc_number.startswith("0") and ruc_number != "00000000":
            raise ValueError("RUC no puede empezar con 0")

        return v

    class Config:
        schema_extra = {
            "example": {
                "ruc": "80016875-4"
            }
        }


class MontoParaguay(BaseModel):
    """
    Validador para montos en Guaran칤es Paraguay.

    Valida que los montos sean v치lidos para el sistema
    tributario paraguayo (sin centavos, rangos apropiados).
    """

    monto: Decimal = Field(
        ...,
        ge=0,
        description="Monto en Guaran칤es (sin centavos)"
    )

    @validator('monto')
    def validate_monto_paraguay(cls, v):
        """
        Valida monto seg칰n reglas Paraguay.

        - No centavos (Guaran칤es son enteros)
        - Rango razonable (0 a 999,999,999,999)
        """
        if v < 0:
            raise ValueError('Monto no puede ser negativo')

        if v > 999999999999:  # 999 mil millones (m치s realista)
            raise ValueError('Monto excede l칤mite m치ximo permitido')

        # Verificar que no tenga decimales (centavos)
        if v != int(v):
            raise ValueError('Guaran칤es no admiten centavos')

        return v

    class Config:
        schema_extra = {
            "example": {
                "monto": "1500000"
            }
        }


# ===============================================
# TIPOS DE DATOS COMUNES
# ===============================================

class EstadoDocumento(BaseModel):
    """
    Estado de documentos electr칩nicos SIFEN.

    Representa el estado actual de un documento en el flujo
    de procesamiento desde creaci칩n hasta aprobaci칩n SIFEN.
    """

    estado: str = Field(
        ...,
        description="Estado actual del documento"
    )

    descripcion: str = Field(
        ...,
        description="Descripci칩n del estado"
    )

    fecha_cambio: datetime = Field(
        ...,
        description="Fecha del 칰ltimo cambio de estado"
    )

    puede_modificar: bool = Field(
        ...,
        description="Si el documento puede ser modificado"
    )

    class Config:
        schema_extra = {
            "example": {
                "estado": "aprobado",
                "descripcion": "Documento aprobado por SIFEN",
                "fecha_cambio": "2025-01-15T10:30:00",
                "puede_modificar": False
            }
        }

# ===============================================
# validaci칩n de errores HTTP
# ===============================================


class ValidationErrorResponse(ErrorResponse):
    """Respuesta espec칤fica para errores de validaci칩n"""

    error_code: str = Field(
        default="VALIDATION_ERROR",
        description="C칩digo espec칤fico de validaci칩n"
    )

    field_errors: Optional[Dict[str, List[str]]] = Field(
        default=None,
        description="Errores espec칤ficos por campo"
    )


class NotFoundErrorResponse(ErrorResponse):
    """Respuesta espec칤fica para recursos no encontrados"""

    error_code: str = Field(
        default="NOT_FOUND",
        description="Recurso no encontrado"
    )

    resource_type: Optional[str] = Field(
        default=None,
        description="Tipo de recurso buscado"
    )

    resource_id: Optional[str] = Field(
        default=None,
        description="ID del recurso buscado"
    )
# ===============================================
# validaci칩n de timestamp
# ===============================================


class DateTimeValidation(BaseModel):
    """Validador para fechas y timestamps Paraguay"""

    fecha: datetime = Field(
        ...,
        description="Fecha y hora"
    )

    @validator('fecha')
    def validate_fecha_paraguay(cls, v):
        """Valida fecha seg칰n zona horaria Paraguay"""
        # Paraguay est치 en UTC-3 (o UTC-4 en verano)
        # Validar que la fecha no sea futura m치s de 1 d칤a
        from datetime import datetime, timedelta

        now = datetime.now()
        if v > now + timedelta(days=1):
            raise ValueError('Fecha no puede estar m치s de 1 d칤a en el futuro')

        # Validar que no sea muy antigua (m치s de 10 a침os)
        if v < now - timedelta(days=3650):
            raise ValueError('Fecha no puede ser mayor a 10 a침os')

        return v

# ===============================================
# validaci칩n de c칩digos de estado espec칤ficos
# ===============================================


class EstadoDocumentoEnum(str, Enum):
    """Estados v치lidos de documentos SIFEN"""
    BORRADOR = "borrador"
    PENDIENTE = "pendiente"
    ENVIADO = "enviado"
    APROBADO = "aprobado"
    RECHAZADO = "rechazado"
    CANCELADO = "cancelado"


class CommonQueryParams(BaseModel):
    """Par치metros de query comunes para b칰squedas"""

    q: Optional[str] = Field(
        None,
        min_length=2,
        max_length=100,
        description="T칠rmino de b칰squeda general"
    )

    fecha_desde: Optional[datetime] = Field(
        None,
        description="Filtrar desde fecha"
    )

    fecha_hasta: Optional[datetime] = Field(
        None,
        description="Filtrar hasta fecha"
    )

    ordenar_por: Optional[str] = Field(
        default="created_at",
        description="Campo para ordenar"
    )

    orden: Optional[str] = Field(
        default="desc",
        description="Direcci칩n del orden (asc/desc)"
    )

    @validator('orden')
    def validate_orden(cls, v):
        """Valida direcci칩n del orden"""
        if v not in ['asc', 'desc']:
            raise ValueError('Orden debe ser "asc" o "desc"')
        return v

# ===============================================
# EXPORTS
# ===============================================


__all__ = [
    # === PAGINACI칍N ===
    "PaginationParams",
    "PaginationMeta",
    "PaginatedResponse",

    # === RESPUESTAS EST츼NDAR ===
    "SuccessResponse",
    "ErrorResponse",
    "MessageResponse",

    # === ERRORES ESPEC칈FICOS ===
    "ValidationErrorResponse",
    "NotFoundErrorResponse",

    # === VALIDADORES PARAGUAY ===
    "RucValidation",
    "MontoParaguay",
    "DateTimeValidation",

    # === TIPOS COMUNES ===
    "EstadoDocumento",
    "EstadoDocumentoEnum",
    "CommonQueryParams",

    # === TIPOS GEN칄RICOS ===
    "DataT"
]
